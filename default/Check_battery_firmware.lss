
Check_battery_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ca6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001fc  00800060  00000ca6  00000d3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080025c  0080025c  00000f36  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00001689  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003ba  00000000  00000000  00001789  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b1d  00000000  00000000  00001b43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000cea  00000000  00000000  00003660  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012e9  00000000  00000000  0000434a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00005634  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000548  00000000  00000000  000057d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a08  00000000  00000000  00005d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000003bd  00000000  00000000  00006724  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  00006ae1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	43 c0       	rjmp	.+134    	; 0xa4 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	12 e0       	ldi	r17, 0x02	; 2
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ea       	ldi	r30, 0xA6	; 166
  3a:	fc e0       	ldi	r31, 0x0C	; 12
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 35       	cpi	r26, 0x5C	; 92
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	12 e0       	ldi	r17, 0x02	; 2
  4a:	ac e5       	ldi	r26, 0x5C	; 92
  4c:	b2 e0       	ldi	r27, 0x02	; 2
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 37       	cpi	r26, 0x78	; 120
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	52 d0       	rcall	.+164    	; 0xfe <main>
  5a:	23 c6       	rjmp	.+3142   	; 0xca2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_9>:
char mystr[]="\rAtmega8A UART ready!\r\n";
char flag_plus = 1;
int count = 0;

ISR(TIMER0_OVF_vect)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	2f 93       	push	r18
  6a:	3f 93       	push	r19
  6c:	4f 93       	push	r20
  6e:	5f 93       	push	r21
  70:	6f 93       	push	r22
  72:	7f 93       	push	r23
  74:	8f 93       	push	r24
  76:	9f 93       	push	r25
  78:	af 93       	push	r26
  7a:	bf 93       	push	r27
  7c:	ef 93       	push	r30
  7e:	ff 93       	push	r31
	func_timer0_ovf();
  80:	a4 d0       	rcall	.+328    	; 0x1ca <func_timer0_ovf>
}
  82:	ff 91       	pop	r31
  84:	ef 91       	pop	r30
  86:	bf 91       	pop	r27
  88:	af 91       	pop	r26
  8a:	9f 91       	pop	r25
  8c:	8f 91       	pop	r24
  8e:	7f 91       	pop	r23
  90:	6f 91       	pop	r22
  92:	5f 91       	pop	r21
  94:	4f 91       	pop	r20
  96:	3f 91       	pop	r19
  98:	2f 91       	pop	r18
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <__vector_14>:

ISR(ADC_vect)
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	3f 93       	push	r19
  b2:	4f 93       	push	r20
  b4:	5f 93       	push	r21
  b6:	6f 93       	push	r22
  b8:	7f 93       	push	r23
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	af 93       	push	r26
  c0:	bf 93       	push	r27
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
	func_ADC();
  c6:	35 d2       	rcall	.+1130   	; 0x532 <func_ADC>
}
  c8:	ff 91       	pop	r31
  ca:	ef 91       	pop	r30
  cc:	bf 91       	pop	r27
  ce:	af 91       	pop	r26
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	7f 91       	pop	r23
  d6:	6f 91       	pop	r22
  d8:	5f 91       	pop	r21
  da:	4f 91       	pop	r20
  dc:	3f 91       	pop	r19
  de:	2f 91       	pop	r18
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <USART_RX_vect>:

ISR(USART_RX_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
	//func_rx_commands(UDR);
}
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <main>:



int main(void)
{
	DDRB = 0b00011111	;
  fe:	8f e1       	ldi	r24, 0x1F	; 31
 100:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11100000	;
 102:	80 ee       	ldi	r24, 0xE0	; 224
 104:	88 bb       	out	0x18, r24	; 24

	DDRD = 0b11111111;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000100;
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	82 bb       	out	0x12, r24	; 18

	TCCR0 = (1<<CS02)|(0<<CS01)|(1<<CS00); // 1024 -> 256 -> 64 (101->100->011)
 10e:	85 e0       	ldi	r24, 0x05	; 5
 110:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	89 bf       	out	0x39, r24	; 57
	TCCR1B = (0<<CS12)|(0<<CS11)|(1<<CS10)|(1<<WGM12); // 8 -> 1 (010->001)
 116:	89 e0       	ldi	r24, 0x09	; 9
 118:	8e bd       	out	0x2e, r24	; 46
	TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM10)|(1<<WGM11); // використовуємо ножку OC0B(PD5) для виводу ШІМ-сигналу
 11a:	83 ea       	ldi	r24, 0xA3	; 163
 11c:	8f bd       	out	0x2f, r24	; 47

	OCR1AH = 0;
 11e:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0;
 120:	1a bc       	out	0x2a, r1	; 42
	OCR1BH = 0;
 122:	19 bc       	out	0x29, r1	; 41
	OCR1BL = 0;
 124:	18 bc       	out	0x28, r1	; 40
//	TIMSK1 =(1<<TOIE1);
//	EICRA |=(1<<ISC11)|(1<<ISC10)|(1<<ISC01)|(1<<ISC00); // лише на зростаючий фронт
//	EIMSK |=(1<<INT1)|(1<<INT0);
	
	//UBRRH = 0;
	UBRRL = 12;
 126:	8c e0       	ldi	r24, 0x0C	; 12
 128:	89 b9       	out	0x09, r24	; 9

	//UCSRA = 0;
	UCSRB = 0b10011000;
 12a:	88 e9       	ldi	r24, 0x98	; 152
 12c:	8a b9       	out	0x0a, r24	; 10
	//UCSRC = 0b00000110; // UMSELn1/0 -> 00 -> Asynchronous USART

		// Опорна напруга - внутрішнє джерело 2,56 В
		// Перетворення виконувати з ADC5 вивода
	ADMUX=(1<<REFS0)|(0<<REFS1)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(1<<MUX0);  // |(1<<MUX2);
 12e:	81 e4       	ldi	r24, 0x41	; 65
 130:	87 b9       	out	0x07, r24	; 7
		// Вмикаємо АЦП
		// Дозволяємо переривання по закінченню перетворення
		// Робоча частота АЦП = Робоча частота МК / 16
	ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 132:	8f e8       	ldi	r24, 0x8F	; 143
 134:	86 b9       	out	0x06, r24	; 6
 136:	e8 e6       	ldi	r30, 0x68	; 104
 138:	f0 e0       	ldi	r31, 0x00	; 0

	for (char number_symbol=0; number_symbol<23; number_symbol++)
	{
		while (!(UCSRA&(1<<UDRE))) {};
 13a:	5d 9b       	sbis	0x0b, 5	; 11
 13c:	fe cf       	rjmp	.-4      	; 0x13a <main+0x3c>
		UDR = mystr[number_symbol];
 13e:	81 91       	ld	r24, Z+
 140:	8c b9       	out	0x0c, r24	; 12
		// Вмикаємо АЦП
		// Дозволяємо переривання по закінченню перетворення
		// Робоча частота АЦП = Робоча частота МК / 16
	ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);

	for (char number_symbol=0; number_symbol<23; number_symbol++)
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	ef 37       	cpi	r30, 0x7F	; 127
 146:	f8 07       	cpc	r31, r24
 148:	c1 f7       	brne	.-16     	; 0x13a <main+0x3c>
	{
		while (!(UCSRA&(1<<UDRE))) {};
		UDR = mystr[number_symbol];
	}

	clrbf(flag_end_ADC_conversion);
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	5a d1       	rcall	.+692    	; 0x402 <clrbf>
	clrbf(flag_repite);
 14e:	85 e0       	ldi	r24, 0x05	; 5
 150:	58 d1       	rcall	.+688    	; 0x402 <clrbf>
	// VAR = 1024;

	sei();
 152:	78 94       	sei
	OCR1A = 0;
 154:	1b bc       	out	0x2b, r1	; 43
 156:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
 158:	19 bc       	out	0x29, r1	; 41
 15a:	18 bc       	out	0x28, r1	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	90 e7       	ldi	r25, 0x70	; 112
 160:	a2 e0       	ldi	r26, 0x02	; 2
 162:	81 50       	subi	r24, 0x01	; 1
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	a0 40       	sbci	r26, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x64>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x6e>
 16c:	00 00       	nop

	_delay_ms(100);
	ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)|(1<<MUX3));
 16e:	87 b1       	in	r24, 0x07	; 7
 170:	80 7f       	andi	r24, 0xF0	; 240
 172:	87 b9       	out	0x07, r24	; 7
 174:	af e6       	ldi	r26, 0x6F	; 111
 176:	b7 e1       	ldi	r27, 0x17	; 23
 178:	11 97       	sbiw	r26, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x7a>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x80>
 17e:	00 00       	nop
	_delay_ms(3);
	//ADMUX |= (1<<MUX2);
	ADCSRA |= (1<<ADSC); // ADC 0
 180:	36 9a       	sbi	0x06, 6	; 6
 182:	8f eb       	ldi	r24, 0xBF	; 191
 184:	95 e4       	ldi	r25, 0x45	; 69
 186:	a4 e0       	ldi	r26, 0x04	; 4
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	a0 40       	sbci	r26, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x8a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x94>
 192:	00 00       	nop
		//{
			//while (!(UCSRA&(1<<UDRE))) {};
			//UDR = t[number_symbol];
		//}

		if (is_bitf(flag_end_ADC_conversion))
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	03 d1       	rcall	.+518    	; 0x39e <is_bitf>
 198:	88 23       	and	r24, r24
 19a:	79 f0       	breq	.+30     	; 0x1ba <main+0xbc>
		{
			//func_send_ADC_result();
			//clrbf(flag_end_ADC_conversion);
			// OCR1B = 1024 - VAR;
			setbf(flag_repite);
 19c:	85 e0       	ldi	r24, 0x05	; 5
 19e:	81 d1       	rcall	.+770    	; 0x4a2 <setbf>
			clrbf(flag_end_ADC_conversion);
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	2f d1       	rcall	.+606    	; 0x402 <clrbf>
			func_send_ADC_result();
 1a4:	73 d0       	rcall	.+230    	; 0x28c <func_send_ADC_result>
 1a6:	e4 e6       	ldi	r30, 0x64	; 100
 1a8:	f0 e0       	ldi	r31, 0x00	; 0

			for (char number_symbol=0; number_symbol<3; number_symbol++)
			{
				while (!(UCSRA&(1<<UDRE))) {};
 1aa:	5d 9b       	sbis	0x0b, 5	; 11
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <main+0xac>
				UDR = bt[number_symbol];
 1ae:	81 91       	ld	r24, Z+
 1b0:	8c b9       	out	0x0c, r24	; 12
			// OCR1B = 1024 - VAR;
			setbf(flag_repite);
			clrbf(flag_end_ADC_conversion);
			func_send_ADC_result();

			for (char number_symbol=0; number_symbol<3; number_symbol++)
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	e7 36       	cpi	r30, 0x67	; 103
 1b6:	f9 07       	cpc	r31, r25
 1b8:	c1 f7       	brne	.-16     	; 0x1aa <main+0xac>
			}

		}


		if (is_bitf(flag_repite))
 1ba:	85 e0       	ldi	r24, 0x05	; 5
 1bc:	f0 d0       	rcall	.+480    	; 0x39e <is_bitf>
 1be:	88 23       	and	r24, r24
 1c0:	01 f3       	breq	.-64     	; 0x182 <main+0x84>
		{
			ADCSRA |= (1<<ADSC);
 1c2:	36 9a       	sbi	0x06, 6	; 6
			clrbf(flag_repite);
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	1d d1       	rcall	.+570    	; 0x402 <clrbf>
 1c8:	dc cf       	rjmp	.-72     	; 0x182 <main+0x84>

000001ca <func_timer0_ovf>:


void func_timer0_ovf()
{
	// LED_status
	if (count_time_LED == LED_threshold)
 1ca:	20 91 6c 02 	lds	r18, 0x026C
 1ce:	30 91 6d 02 	lds	r19, 0x026D
 1d2:	80 91 51 01 	lds	r24, 0x0151
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	28 17       	cp	r18, r24
 1da:	39 07       	cpc	r19, r25
 1dc:	69 f4       	brne	.+26     	; 0x1f8 <func_timer0_ovf+0x2e>
	{
		if (((PORTD>>LED_status)&MASK_BUTTON) != 1)
 1de:	82 b3       	in	r24, 0x12	; 18
 1e0:	86 95       	lsr	r24
 1e2:	86 95       	lsr	r24
 1e4:	80 fd       	sbrc	r24, 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <func_timer0_ovf+0x22>
		{	PORTD |=(1<<LED_status);	}
 1e8:	92 9a       	sbi	0x12, 2	; 18
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <func_timer0_ovf+0x24>
		else
		{	PORTD &= ~(1<<LED_status);	}
 1ec:	92 98       	cbi	0x12, 2	; 18

		count_time_LED = 0;
 1ee:	10 92 6d 02 	sts	0x026D, r1
 1f2:	10 92 6c 02 	sts	0x026C, r1
 1f6:	08 95       	ret
	}
	else
	{ count_time_LED++; }
 1f8:	80 91 6c 02 	lds	r24, 0x026C
 1fc:	90 91 6d 02 	lds	r25, 0x026D
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	90 93 6d 02 	sts	0x026D, r25
 206:	80 93 6c 02 	sts	0x026C, r24
 20a:	08 95       	ret

0000020c <func_convertion_data>:
// in this function send different var and return mas
void func_convertion_data(VAR_VAR)
{
	int data = 0;
	dist_thouthend=0;
	dist_hundrets=0;
 20c:	10 92 62 02 	sts	0x0262, r1
	dist_tens=0;
 210:	10 92 63 02 	sts	0x0263, r1
 214:	40 e0       	ldi	r20, 0x00	; 0
	dist_ones=0;

	data=VAR_VAR;
 216:	28 2f       	mov	r18, r24
 218:	39 2f       	mov	r19, r25
 21a:	c9 01       	movw	r24, r18
	while(data>999)
 21c:	03 c0       	rjmp	.+6      	; 0x224 <func_convertion_data+0x18>
	{	data -=1000; dist_thouthend++;}
 21e:	88 5e       	subi	r24, 0xE8	; 232
 220:	93 40       	sbci	r25, 0x03	; 3
 222:	42 2f       	mov	r20, r18
 224:	24 2f       	mov	r18, r20
 226:	2f 5f       	subi	r18, 0xFF	; 255
	dist_hundrets=0;
	dist_tens=0;
	dist_ones=0;

	data=VAR_VAR;
	while(data>999)
 228:	33 e0       	ldi	r19, 0x03	; 3
 22a:	88 3e       	cpi	r24, 0xE8	; 232
 22c:	93 07       	cpc	r25, r19
 22e:	bc f7       	brge	.-18     	; 0x21e <func_convertion_data+0x12>
 230:	40 93 61 02 	sts	0x0261, r20
 234:	20 91 62 02 	lds	r18, 0x0262
 238:	03 c0       	rjmp	.+6      	; 0x240 <func_convertion_data+0x34>
	{	data -=1000; dist_thouthend++;}
	while(data>99)	
	{	data -=100;	dist_hundrets++;}
 23a:	84 56       	subi	r24, 0x64	; 100
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	23 2f       	mov	r18, r19
 240:	32 2f       	mov	r19, r18
 242:	3f 5f       	subi	r19, 0xFF	; 255
	dist_ones=0;

	data=VAR_VAR;
	while(data>999)
	{	data -=1000; dist_thouthend++;}
	while(data>99)	
 244:	84 36       	cpi	r24, 0x64	; 100
 246:	91 05       	cpc	r25, r1
 248:	c4 f7       	brge	.-16     	; 0x23a <func_convertion_data+0x2e>
 24a:	20 93 62 02 	sts	0x0262, r18
 24e:	20 91 63 02 	lds	r18, 0x0263
 252:	02 c0       	rjmp	.+4      	; 0x258 <func_convertion_data+0x4c>
	{	data -=100;	dist_hundrets++;}
	while(data>9)	
	{	data -=10;dist_tens++;}
 254:	0a 97       	sbiw	r24, 0x0a	; 10
 256:	23 2f       	mov	r18, r19
 258:	32 2f       	mov	r19, r18
 25a:	3f 5f       	subi	r19, 0xFF	; 255
	data=VAR_VAR;
	while(data>999)
	{	data -=1000; dist_thouthend++;}
	while(data>99)	
	{	data -=100;	dist_hundrets++;}
	while(data>9)	
 25c:	8a 30       	cpi	r24, 0x0A	; 10
 25e:	91 05       	cpc	r25, r1
 260:	cc f7       	brge	.-14     	; 0x254 <func_convertion_data+0x48>
 262:	20 93 63 02 	sts	0x0263, r18
	{	data -=10;dist_tens++;}
	dist_ones=data;	
 266:	80 93 64 02 	sts	0x0264, r24
}
 26a:	08 95       	ret

0000026c <func_check_threshold>:

void func_check_threshold(VAR_VAR_U)
{
	if (VAR_VAR_U < 2450)
 26c:	29 e0       	ldi	r18, 0x09	; 9
 26e:	82 39       	cpi	r24, 0x92	; 146
 270:	92 07       	cpc	r25, r18
 272:	34 f4       	brge	.+12     	; 0x280 <func_check_threshold+0x14>
	{	
		LED_threshold = end_of_discharge;
 274:	80 91 50 01 	lds	r24, 0x0150
 278:	80 93 51 01 	sts	0x0151, r24
		PORTD |=(1<<Bat_relay);		
 27c:	93 9a       	sbi	0x12, 3	; 18
 27e:	08 95       	ret
	}
	else
	{	
		LED_threshold = discharge;
 280:	80 91 4f 01 	lds	r24, 0x014F
 284:	80 93 51 01 	sts	0x0151, r24
		PORTD &= ~(1<<Bat_relay);
 288:	93 98       	cbi	0x12, 3	; 18
 28a:	08 95       	ret

0000028c <func_send_ADC_result>:
*/

void func_send_ADC_result(void)
{

	func_convertion_data(VAR);
 28c:	80 91 65 02 	lds	r24, 0x0265
 290:	90 91 66 02 	lds	r25, 0x0266
 294:	bb df       	rcall	.-138    	; 0x20c <func_convertion_data>

	while (!(UCSRA&(1<<UDRE))) {};
 296:	5d 9b       	sbis	0x0b, 5	; 11
 298:	fe cf       	rjmp	.-4      	; 0x296 <func_send_ADC_result+0xa>
	UDR = digits[dist_thouthend];
 29a:	e0 91 61 02 	lds	r30, 0x0261
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	e0 5c       	subi	r30, 0xC0	; 192
 2a2:	fe 4f       	sbci	r31, 0xFE	; 254
 2a4:	80 81       	ld	r24, Z
 2a6:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA&(1<<UDRE))) {};
 2a8:	5d 9b       	sbis	0x0b, 5	; 11
 2aa:	fe cf       	rjmp	.-4      	; 0x2a8 <func_send_ADC_result+0x1c>
	UDR = digits[dist_hundrets];
 2ac:	e0 91 62 02 	lds	r30, 0x0262
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	e0 5c       	subi	r30, 0xC0	; 192
 2b4:	fe 4f       	sbci	r31, 0xFE	; 254
 2b6:	80 81       	ld	r24, Z
 2b8:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA&(1<<UDRE))) {};
 2ba:	5d 9b       	sbis	0x0b, 5	; 11
 2bc:	fe cf       	rjmp	.-4      	; 0x2ba <func_send_ADC_result+0x2e>
	UDR = digits[dist_tens];
 2be:	e0 91 63 02 	lds	r30, 0x0263
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	e0 5c       	subi	r30, 0xC0	; 192
 2c6:	fe 4f       	sbci	r31, 0xFE	; 254
 2c8:	80 81       	ld	r24, Z
 2ca:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA&(1<<UDRE))) {};
 2cc:	5d 9b       	sbis	0x0b, 5	; 11
 2ce:	fe cf       	rjmp	.-4      	; 0x2cc <func_send_ADC_result+0x40>
	UDR = digits[dist_ones];
 2d0:	e0 91 64 02 	lds	r30, 0x0264
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	e0 5c       	subi	r30, 0xC0	; 192
 2d8:	fe 4f       	sbci	r31, 0xFE	; 254
 2da:	80 81       	ld	r24, Z
 2dc:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA&(1<<UDRE))) {};
 2de:	5d 9b       	sbis	0x0b, 5	; 11
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <func_send_ADC_result+0x52>
	UDR = next_string;
 2e2:	80 91 3e 01 	lds	r24, 0x013E
 2e6:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA&(1<<UDRE))) {};
 2e8:	5d 9b       	sbis	0x0b, 5	; 11
 2ea:	fe cf       	rjmp	.-4      	; 0x2e8 <func_send_ADC_result+0x5c>
	UDR = new_line;
 2ec:	80 91 3f 01 	lds	r24, 0x013F
 2f0:	8c b9       	out	0x0c, r24	; 12

	VAR_U = (VAR*5120.0)/1024;	// 0.0025 for mega8, 0.001074 for mega328
 2f2:	60 91 65 02 	lds	r22, 0x0265
 2f6:	70 91 66 02 	lds	r23, 0x0266
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	82 d2       	rcall	.+1284   	; 0x804 <__floatunsisf>
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	40 ea       	ldi	r20, 0xA0	; 160
 306:	55 e4       	ldi	r21, 0x45	; 69
 308:	39 d1       	rcall	.+626    	; 0x57c <__mulsf3>
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	40 e8       	ldi	r20, 0x80	; 128
 310:	5a e3       	ldi	r21, 0x3A	; 58
 312:	34 d1       	rcall	.+616    	; 0x57c <__mulsf3>
 314:	28 d2       	rcall	.+1104   	; 0x766 <__fixsfsi>
 316:	dc 01       	movw	r26, r24
 318:	cb 01       	movw	r24, r22
 31a:	90 93 69 02 	sts	0x0269, r25
 31e:	80 93 68 02 	sts	0x0268, r24
	func_convertion_data(VAR_U);
 322:	74 df       	rcall	.-280    	; 0x20c <func_convertion_data>

	while (!(UCSRA&(1<<UDRE))) {};
 324:	5d 9b       	sbis	0x0b, 5	; 11
 326:	fe cf       	rjmp	.-4      	; 0x324 <func_send_ADC_result+0x98>
	UDR = point[0];
 328:	80 91 4a 01 	lds	r24, 0x014A
 32c:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA&(1<<UDRE))) {};
 32e:	5d 9b       	sbis	0x0b, 5	; 11
 330:	fe cf       	rjmp	.-4      	; 0x32e <func_send_ADC_result+0xa2>
	UDR = digits[dist_thouthend];
 332:	e0 91 61 02 	lds	r30, 0x0261
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	e0 5c       	subi	r30, 0xC0	; 192
 33a:	fe 4f       	sbci	r31, 0xFE	; 254
 33c:	80 81       	ld	r24, Z
 33e:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA&(1<<UDRE))) {};
 340:	5d 9b       	sbis	0x0b, 5	; 11
 342:	fe cf       	rjmp	.-4      	; 0x340 <func_send_ADC_result+0xb4>
	UDR = digits[dist_hundrets];
 344:	e0 91 62 02 	lds	r30, 0x0262
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	e0 5c       	subi	r30, 0xC0	; 192
 34c:	fe 4f       	sbci	r31, 0xFE	; 254
 34e:	80 81       	ld	r24, Z
 350:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA&(1<<UDRE))) {};
 352:	5d 9b       	sbis	0x0b, 5	; 11
 354:	fe cf       	rjmp	.-4      	; 0x352 <func_send_ADC_result+0xc6>
	UDR = digits[dist_tens];
 356:	e0 91 63 02 	lds	r30, 0x0263
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	e0 5c       	subi	r30, 0xC0	; 192
 35e:	fe 4f       	sbci	r31, 0xFE	; 254
 360:	80 81       	ld	r24, Z
 362:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA&(1<<UDRE))) {};
 364:	5d 9b       	sbis	0x0b, 5	; 11
 366:	fe cf       	rjmp	.-4      	; 0x364 <func_send_ADC_result+0xd8>
	UDR = digits[dist_ones];
 368:	e0 91 64 02 	lds	r30, 0x0264
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	e0 5c       	subi	r30, 0xC0	; 192
 370:	fe 4f       	sbci	r31, 0xFE	; 254
 372:	80 81       	ld	r24, Z
 374:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA&(1<<UDRE))) {};
 376:	5d 9b       	sbis	0x0b, 5	; 11
 378:	fe cf       	rjmp	.-4      	; 0x376 <func_send_ADC_result+0xea>
	UDR = next_string;
 37a:	80 91 3e 01 	lds	r24, 0x013E
 37e:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA&(1<<UDRE))) {};
 380:	5d 9b       	sbis	0x0b, 5	; 11
 382:	fe cf       	rjmp	.-4      	; 0x380 <func_send_ADC_result+0xf4>
	UDR = new_line;
 384:	80 91 3f 01 	lds	r24, 0x013F
 388:	8c b9       	out	0x0c, r24	; 12

	func_check_threshold(VAR_U);
 38a:	80 91 68 02 	lds	r24, 0x0268
 38e:	90 91 69 02 	lds	r25, 0x0269
 392:	6c df       	rcall	.-296    	; 0x26c <func_check_threshold>

	VAR = 0;
 394:	10 92 66 02 	sts	0x0266, r1
 398:	10 92 65 02 	sts	0x0265, r1
}
 39c:	08 95       	ret

0000039e <is_bitf>:
**********************************************/

inline char is_bitf(byte bit)
{
	byte res;// ?????????? ?????????? ???????	
	if (bit< 32) //???? ??? ?????? 32 ???????????? ????????? ?????????? ??????
 39e:	80 32       	cpi	r24, 0x20	; 32
 3a0:	d0 f4       	brcc	.+52     	; 0x3d6 <is_bitf+0x38>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 3a2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3a4:	f8 94       	cli
		{
			if ((flag0 & (1UL<<bit)) !=0)			
 3a6:	20 91 70 02 	lds	r18, 0x0270
 3aa:	30 91 71 02 	lds	r19, 0x0271
 3ae:	40 91 72 02 	lds	r20, 0x0272
 3b2:	50 91 73 02 	lds	r21, 0x0273
 3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <is_bitf+0x22>
 3b8:	56 95       	lsr	r21
 3ba:	47 95       	ror	r20
 3bc:	37 95       	ror	r19
 3be:	27 95       	ror	r18
 3c0:	8a 95       	dec	r24
 3c2:	d2 f7       	brpl	.-12     	; 0x3b8 <is_bitf+0x1a>
 3c4:	21 70       	andi	r18, 0x01	; 1
 3c6:	30 70       	andi	r19, 0x00	; 0

/********************************************
???????????? ??????????? ???? ?????
**********************************************/

inline char is_bitf(byte bit)
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	21 15       	cp	r18, r1
 3cc:	31 05       	cpc	r19, r1
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <is_bitf+0x34>
 3d0:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3d2:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 3d4:	08 95       	ret
			res = 0;
		}		
	}	
	else
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 3d6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3d8:	f8 94       	cli
		{
			bit-=32;			
 3da:	38 2f       	mov	r19, r24
 3dc:	30 52       	subi	r19, 0x20	; 32
			if ((flag1 & (1UL<<bit)) !=0)			
 3de:	80 91 74 02 	lds	r24, 0x0274
 3e2:	90 91 75 02 	lds	r25, 0x0275
 3e6:	a0 91 76 02 	lds	r26, 0x0276
 3ea:	b0 91 77 02 	lds	r27, 0x0277
 3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <is_bitf+0x5a>
 3f0:	b6 95       	lsr	r27
 3f2:	a7 95       	ror	r26
 3f4:	97 95       	ror	r25
 3f6:	87 95       	ror	r24
 3f8:	3a 95       	dec	r19
 3fa:	d2 f7       	brpl	.-12     	; 0x3f0 <is_bitf+0x52>

/********************************************
???????????? ??????????? ???? ?????
**********************************************/

inline char is_bitf(byte bit)
 3fc:	81 70       	andi	r24, 0x01	; 1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3fe:	2f bf       	out	0x3f, r18	; 63
			else
			res = 0;
		}		
	}	
	return res;// ????????? ????????? ???????	
}
 400:	08 95       	ret

00000402 <clrbf>:
**********************************************/


inline void clrbf ( byte bit)
{
	if (bit <32) //???? ??? ?????? 32 ???????????? ????????? ?????????? ??????
 402:	80 32       	cpi	r24, 0x20	; 32
 404:	30 f5       	brcc	.+76     	; 0x452 <clrbf+0x50>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 406:	6f b7       	in	r22, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 408:	f8 94       	cli
		{
			flag0&=(~(1UL << bit));
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	04 c0       	rjmp	.+8      	; 0x41c <clrbf+0x1a>
 414:	22 0f       	add	r18, r18
 416:	33 1f       	adc	r19, r19
 418:	44 1f       	adc	r20, r20
 41a:	55 1f       	adc	r21, r21
 41c:	8a 95       	dec	r24
 41e:	d2 f7       	brpl	.-12     	; 0x414 <clrbf+0x12>
 420:	20 95       	com	r18
 422:	30 95       	com	r19
 424:	40 95       	com	r20
 426:	50 95       	com	r21
 428:	80 91 70 02 	lds	r24, 0x0270
 42c:	90 91 71 02 	lds	r25, 0x0271
 430:	a0 91 72 02 	lds	r26, 0x0272
 434:	b0 91 73 02 	lds	r27, 0x0273
 438:	82 23       	and	r24, r18
 43a:	93 23       	and	r25, r19
 43c:	a4 23       	and	r26, r20
 43e:	b5 23       	and	r27, r21
 440:	80 93 70 02 	sts	0x0270, r24
 444:	90 93 71 02 	sts	0x0271, r25
 448:	a0 93 72 02 	sts	0x0272, r26
 44c:	b0 93 73 02 	sts	0x0273, r27
 450:	26 c0       	rjmp	.+76     	; 0x49e <__stack+0x3f>
		
	}
	
	else
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 452:	6f b7       	in	r22, 0x3f	; 63
 454:	f8 94       	cli
		{
			bit-=32;
 456:	80 52       	subi	r24, 0x20	; 32
			flag1&=(~(1UL << bit));
 458:	21 e0       	ldi	r18, 0x01	; 1
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	04 c0       	rjmp	.+8      	; 0x46a <__stack+0xb>
 462:	22 0f       	add	r18, r18
 464:	33 1f       	adc	r19, r19
 466:	44 1f       	adc	r20, r20
 468:	55 1f       	adc	r21, r21
 46a:	8a 95       	dec	r24
 46c:	d2 f7       	brpl	.-12     	; 0x462 <__stack+0x3>
 46e:	20 95       	com	r18
 470:	30 95       	com	r19
 472:	40 95       	com	r20
 474:	50 95       	com	r21
 476:	80 91 74 02 	lds	r24, 0x0274
 47a:	90 91 75 02 	lds	r25, 0x0275
 47e:	a0 91 76 02 	lds	r26, 0x0276
 482:	b0 91 77 02 	lds	r27, 0x0277
 486:	82 23       	and	r24, r18
 488:	93 23       	and	r25, r19
 48a:	a4 23       	and	r26, r20
 48c:	b5 23       	and	r27, r21
 48e:	80 93 74 02 	sts	0x0274, r24
 492:	90 93 75 02 	sts	0x0275, r25
 496:	a0 93 76 02 	sts	0x0276, r26
 49a:	b0 93 77 02 	sts	0x0277, r27
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 49e:	6f bf       	out	0x3f, r22	; 63
    __asm__ volatile ("" ::: "memory");
 4a0:	08 95       	ret

000004a2 <setbf>:
*************************************************/

inline void setbf ( byte bit)
{
	
	if (bit<32) //???? ??? ?????? 32 ???????????? ????????? ?????????? ??????
 4a2:	80 32       	cpi	r24, 0x20	; 32
 4a4:	10 f5       	brcc	.+68     	; 0x4ea <setbf+0x48>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 4a6:	6f b7       	in	r22, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 4a8:	f8 94       	cli
		{
			flag0|=(1UL << bit);
 4aa:	21 e0       	ldi	r18, 0x01	; 1
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	50 e0       	ldi	r21, 0x00	; 0
 4b2:	04 c0       	rjmp	.+8      	; 0x4bc <setbf+0x1a>
 4b4:	22 0f       	add	r18, r18
 4b6:	33 1f       	adc	r19, r19
 4b8:	44 1f       	adc	r20, r20
 4ba:	55 1f       	adc	r21, r21
 4bc:	8a 95       	dec	r24
 4be:	d2 f7       	brpl	.-12     	; 0x4b4 <setbf+0x12>
 4c0:	80 91 70 02 	lds	r24, 0x0270
 4c4:	90 91 71 02 	lds	r25, 0x0271
 4c8:	a0 91 72 02 	lds	r26, 0x0272
 4cc:	b0 91 73 02 	lds	r27, 0x0273
 4d0:	82 2b       	or	r24, r18
 4d2:	93 2b       	or	r25, r19
 4d4:	a4 2b       	or	r26, r20
 4d6:	b5 2b       	or	r27, r21
 4d8:	80 93 70 02 	sts	0x0270, r24
 4dc:	90 93 71 02 	sts	0x0271, r25
 4e0:	a0 93 72 02 	sts	0x0272, r26
 4e4:	b0 93 73 02 	sts	0x0273, r27
 4e8:	22 c0       	rjmp	.+68     	; 0x52e <setbf+0x8c>
		
	}
	
	else
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 4ea:	6f b7       	in	r22, 0x3f	; 63
 4ec:	f8 94       	cli
		{
			bit-=32;
 4ee:	80 52       	subi	r24, 0x20	; 32
			flag1|=(1UL << bit);
 4f0:	21 e0       	ldi	r18, 0x01	; 1
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	40 e0       	ldi	r20, 0x00	; 0
 4f6:	50 e0       	ldi	r21, 0x00	; 0
 4f8:	04 c0       	rjmp	.+8      	; 0x502 <setbf+0x60>
 4fa:	22 0f       	add	r18, r18
 4fc:	33 1f       	adc	r19, r19
 4fe:	44 1f       	adc	r20, r20
 500:	55 1f       	adc	r21, r21
 502:	8a 95       	dec	r24
 504:	d2 f7       	brpl	.-12     	; 0x4fa <setbf+0x58>
 506:	80 91 74 02 	lds	r24, 0x0274
 50a:	90 91 75 02 	lds	r25, 0x0275
 50e:	a0 91 76 02 	lds	r26, 0x0276
 512:	b0 91 77 02 	lds	r27, 0x0277
 516:	82 2b       	or	r24, r18
 518:	93 2b       	or	r25, r19
 51a:	a4 2b       	or	r26, r20
 51c:	b5 2b       	or	r27, r21
 51e:	80 93 74 02 	sts	0x0274, r24
 522:	90 93 75 02 	sts	0x0275, r25
 526:	a0 93 76 02 	sts	0x0276, r26
 52a:	b0 93 77 02 	sts	0x0277, r27
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 52e:	6f bf       	out	0x3f, r22	; 63
    __asm__ volatile ("" ::: "memory");
 530:	08 95       	ret

00000532 <func_ADC>:
	//{
	//	while (!(UCSRA&(1<<UDRE))) {};
	//	UDR = at[number_symbol];
	//}

	if (i<10)
 532:	40 91 67 02 	lds	r20, 0x0267
 536:	4a 30       	cpi	r20, 0x0A	; 10
 538:	88 f4       	brcc	.+34     	; 0x55c <func_ADC+0x2a>
	{
		VAR += ADC;
 53a:	20 91 65 02 	lds	r18, 0x0265
 53e:	30 91 66 02 	lds	r19, 0x0266
 542:	84 b1       	in	r24, 0x04	; 4
 544:	95 b1       	in	r25, 0x05	; 5
 546:	82 0f       	add	r24, r18
 548:	93 1f       	adc	r25, r19
 54a:	90 93 66 02 	sts	0x0266, r25
 54e:	80 93 65 02 	sts	0x0265, r24
		i++;
 552:	4f 5f       	subi	r20, 0xFF	; 255
 554:	40 93 67 02 	sts	0x0267, r20
		setbf(flag_repite);
 558:	85 e0       	ldi	r24, 0x05	; 5
 55a:	0e c0       	rjmp	.+28     	; 0x578 <func_ADC+0x46>
	}
	else
	{
		i = 0;
 55c:	10 92 67 02 	sts	0x0267, r1
		VAR = VAR/10;
 560:	80 91 65 02 	lds	r24, 0x0265
 564:	90 91 66 02 	lds	r25, 0x0266
 568:	6a e0       	ldi	r22, 0x0A	; 10
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	4f d3       	rcall	.+1694   	; 0xc0c <__udivmodhi4>
 56e:	70 93 66 02 	sts	0x0266, r23
 572:	60 93 65 02 	sts	0x0265, r22
		setbf(flag_end_ADC_conversion);
 576:	82 e0       	ldi	r24, 0x02	; 2
 578:	94 df       	rcall	.-216    	; 0x4a2 <setbf>
 57a:	08 95       	ret

0000057c <__mulsf3>:
 57c:	a0 e2       	ldi	r26, 0x20	; 32
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	e3 ec       	ldi	r30, 0xC3	; 195
 582:	f2 e0       	ldi	r31, 0x02	; 2
 584:	57 c3       	rjmp	.+1710   	; 0xc34 <__prologue_saves__>
 586:	69 83       	std	Y+1, r22	; 0x01
 588:	7a 83       	std	Y+2, r23	; 0x02
 58a:	8b 83       	std	Y+3, r24	; 0x03
 58c:	9c 83       	std	Y+4, r25	; 0x04
 58e:	2d 83       	std	Y+5, r18	; 0x05
 590:	3e 83       	std	Y+6, r19	; 0x06
 592:	4f 83       	std	Y+7, r20	; 0x07
 594:	58 87       	std	Y+8, r21	; 0x08
 596:	ce 01       	movw	r24, r28
 598:	01 96       	adiw	r24, 0x01	; 1
 59a:	be 01       	movw	r22, r28
 59c:	67 5f       	subi	r22, 0xF7	; 247
 59e:	7f 4f       	sbci	r23, 0xFF	; 255
 5a0:	cc d2       	rcall	.+1432   	; 0xb3a <__unpack_f>
 5a2:	ce 01       	movw	r24, r28
 5a4:	05 96       	adiw	r24, 0x05	; 5
 5a6:	be 01       	movw	r22, r28
 5a8:	6f 5e       	subi	r22, 0xEF	; 239
 5aa:	7f 4f       	sbci	r23, 0xFF	; 255
 5ac:	c6 d2       	rcall	.+1420   	; 0xb3a <__unpack_f>
 5ae:	99 85       	ldd	r25, Y+9	; 0x09
 5b0:	92 30       	cpi	r25, 0x02	; 2
 5b2:	78 f0       	brcs	.+30     	; 0x5d2 <__mulsf3+0x56>
 5b4:	89 89       	ldd	r24, Y+17	; 0x11
 5b6:	82 30       	cpi	r24, 0x02	; 2
 5b8:	c0 f0       	brcs	.+48     	; 0x5ea <__mulsf3+0x6e>
 5ba:	94 30       	cpi	r25, 0x04	; 4
 5bc:	19 f4       	brne	.+6      	; 0x5c4 <__mulsf3+0x48>
 5be:	82 30       	cpi	r24, 0x02	; 2
 5c0:	41 f4       	brne	.+16     	; 0x5d2 <__mulsf3+0x56>
 5c2:	cb c0       	rjmp	.+406    	; 0x75a <__mulsf3+0x1de>
 5c4:	84 30       	cpi	r24, 0x04	; 4
 5c6:	19 f4       	brne	.+6      	; 0x5ce <__mulsf3+0x52>
 5c8:	92 30       	cpi	r25, 0x02	; 2
 5ca:	79 f4       	brne	.+30     	; 0x5ea <__mulsf3+0x6e>
 5cc:	c6 c0       	rjmp	.+396    	; 0x75a <__mulsf3+0x1de>
 5ce:	92 30       	cpi	r25, 0x02	; 2
 5d0:	51 f4       	brne	.+20     	; 0x5e6 <__mulsf3+0x6a>
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	2a 85       	ldd	r18, Y+10	; 0x0a
 5d6:	9a 89       	ldd	r25, Y+18	; 0x12
 5d8:	29 17       	cp	r18, r25
 5da:	09 f4       	brne	.+2      	; 0x5de <__mulsf3+0x62>
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	8a 87       	std	Y+10, r24	; 0x0a
 5e0:	ce 01       	movw	r24, r28
 5e2:	09 96       	adiw	r24, 0x09	; 9
 5e4:	bc c0       	rjmp	.+376    	; 0x75e <__mulsf3+0x1e2>
 5e6:	82 30       	cpi	r24, 0x02	; 2
 5e8:	51 f4       	brne	.+20     	; 0x5fe <__mulsf3+0x82>
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	2a 85       	ldd	r18, Y+10	; 0x0a
 5ee:	9a 89       	ldd	r25, Y+18	; 0x12
 5f0:	29 17       	cp	r18, r25
 5f2:	09 f4       	brne	.+2      	; 0x5f6 <__mulsf3+0x7a>
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	8a 8b       	std	Y+18, r24	; 0x12
 5f8:	ce 01       	movw	r24, r28
 5fa:	41 96       	adiw	r24, 0x11	; 17
 5fc:	b0 c0       	rjmp	.+352    	; 0x75e <__mulsf3+0x1e2>
 5fe:	6d 84       	ldd	r6, Y+13	; 0x0d
 600:	7e 84       	ldd	r7, Y+14	; 0x0e
 602:	8f 84       	ldd	r8, Y+15	; 0x0f
 604:	98 88       	ldd	r9, Y+16	; 0x10
 606:	ed 88       	ldd	r14, Y+21	; 0x15
 608:	fe 88       	ldd	r15, Y+22	; 0x16
 60a:	0f 89       	ldd	r16, Y+23	; 0x17
 60c:	18 8d       	ldd	r17, Y+24	; 0x18
 60e:	e0 e2       	ldi	r30, 0x20	; 32
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	dc 01       	movw	r26, r24
 618:	aa 24       	eor	r10, r10
 61a:	bb 24       	eor	r11, r11
 61c:	65 01       	movw	r12, r10
 61e:	20 e0       	ldi	r18, 0x00	; 0
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	a9 01       	movw	r20, r18
 624:	b3 01       	movw	r22, r6
 626:	61 70       	andi	r22, 0x01	; 1
 628:	70 70       	andi	r23, 0x00	; 0
 62a:	61 15       	cp	r22, r1
 62c:	71 05       	cpc	r23, r1
 62e:	d1 f0       	breq	.+52     	; 0x664 <__mulsf3+0xe8>
 630:	2e 0d       	add	r18, r14
 632:	3f 1d       	adc	r19, r15
 634:	40 1f       	adc	r20, r16
 636:	51 1f       	adc	r21, r17
 638:	15 01       	movw	r2, r10
 63a:	26 01       	movw	r4, r12
 63c:	28 0e       	add	r2, r24
 63e:	39 1e       	adc	r3, r25
 640:	4a 1e       	adc	r4, r26
 642:	5b 1e       	adc	r5, r27
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	a0 e0       	ldi	r26, 0x00	; 0
 64a:	b0 e0       	ldi	r27, 0x00	; 0
 64c:	2e 15       	cp	r18, r14
 64e:	3f 05       	cpc	r19, r15
 650:	40 07       	cpc	r20, r16
 652:	51 07       	cpc	r21, r17
 654:	18 f0       	brcs	.+6      	; 0x65c <__mulsf3+0xe0>
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	dc 01       	movw	r26, r24
 65c:	82 0d       	add	r24, r2
 65e:	93 1d       	adc	r25, r3
 660:	a4 1d       	adc	r26, r4
 662:	b5 1d       	adc	r27, r5
 664:	aa 0c       	add	r10, r10
 666:	bb 1c       	adc	r11, r11
 668:	cc 1c       	adc	r12, r12
 66a:	dd 1c       	adc	r13, r13
 66c:	17 ff       	sbrs	r17, 7
 66e:	09 c0       	rjmp	.+18     	; 0x682 <__mulsf3+0x106>
 670:	61 e0       	ldi	r22, 0x01	; 1
 672:	26 2e       	mov	r2, r22
 674:	31 2c       	mov	r3, r1
 676:	41 2c       	mov	r4, r1
 678:	51 2c       	mov	r5, r1
 67a:	a2 28       	or	r10, r2
 67c:	b3 28       	or	r11, r3
 67e:	c4 28       	or	r12, r4
 680:	d5 28       	or	r13, r5
 682:	31 97       	sbiw	r30, 0x01	; 1
 684:	49 f0       	breq	.+18     	; 0x698 <__mulsf3+0x11c>
 686:	ee 0c       	add	r14, r14
 688:	ff 1c       	adc	r15, r15
 68a:	00 1f       	adc	r16, r16
 68c:	11 1f       	adc	r17, r17
 68e:	96 94       	lsr	r9
 690:	87 94       	ror	r8
 692:	77 94       	ror	r7
 694:	67 94       	ror	r6
 696:	c6 cf       	rjmp	.-116    	; 0x624 <__mulsf3+0xa8>
 698:	6b 89       	ldd	r22, Y+19	; 0x13
 69a:	7c 89       	ldd	r23, Y+20	; 0x14
 69c:	eb 85       	ldd	r30, Y+11	; 0x0b
 69e:	fc 85       	ldd	r31, Y+12	; 0x0c
 6a0:	6e 0f       	add	r22, r30
 6a2:	7f 1f       	adc	r23, r31
 6a4:	6e 5f       	subi	r22, 0xFE	; 254
 6a6:	7f 4f       	sbci	r23, 0xFF	; 255
 6a8:	7c 8f       	std	Y+28, r23	; 0x1c
 6aa:	6b 8f       	std	Y+27, r22	; 0x1b
 6ac:	61 e0       	ldi	r22, 0x01	; 1
 6ae:	ea 85       	ldd	r30, Y+10	; 0x0a
 6b0:	7a 89       	ldd	r23, Y+18	; 0x12
 6b2:	e7 17       	cp	r30, r23
 6b4:	09 f4       	brne	.+2      	; 0x6b8 <__mulsf3+0x13c>
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	6a 8f       	std	Y+26, r22	; 0x1a
 6ba:	6b 8d       	ldd	r22, Y+27	; 0x1b
 6bc:	7c 8d       	ldd	r23, Y+28	; 0x1c
 6be:	10 c0       	rjmp	.+32     	; 0x6e0 <__mulsf3+0x164>
 6c0:	fc 01       	movw	r30, r24
 6c2:	e1 70       	andi	r30, 0x01	; 1
 6c4:	f0 70       	andi	r31, 0x00	; 0
 6c6:	30 97       	sbiw	r30, 0x00	; 0
 6c8:	29 f0       	breq	.+10     	; 0x6d4 <__mulsf3+0x158>
 6ca:	56 95       	lsr	r21
 6cc:	47 95       	ror	r20
 6ce:	37 95       	ror	r19
 6d0:	27 95       	ror	r18
 6d2:	50 68       	ori	r21, 0x80	; 128
 6d4:	b6 95       	lsr	r27
 6d6:	a7 95       	ror	r26
 6d8:	97 95       	ror	r25
 6da:	87 95       	ror	r24
 6dc:	6f 5f       	subi	r22, 0xFF	; 255
 6de:	7f 4f       	sbci	r23, 0xFF	; 255
 6e0:	b7 fd       	sbrc	r27, 7
 6e2:	ee cf       	rjmp	.-36     	; 0x6c0 <__mulsf3+0x144>
 6e4:	0c c0       	rjmp	.+24     	; 0x6fe <__mulsf3+0x182>
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	aa 1f       	adc	r26, r26
 6ec:	bb 1f       	adc	r27, r27
 6ee:	57 fd       	sbrc	r21, 7
 6f0:	81 60       	ori	r24, 0x01	; 1
 6f2:	22 0f       	add	r18, r18
 6f4:	33 1f       	adc	r19, r19
 6f6:	44 1f       	adc	r20, r20
 6f8:	55 1f       	adc	r21, r21
 6fa:	61 50       	subi	r22, 0x01	; 1
 6fc:	70 40       	sbci	r23, 0x00	; 0
 6fe:	80 30       	cpi	r24, 0x00	; 0
 700:	e0 e0       	ldi	r30, 0x00	; 0
 702:	9e 07       	cpc	r25, r30
 704:	e0 e0       	ldi	r30, 0x00	; 0
 706:	ae 07       	cpc	r26, r30
 708:	e0 e4       	ldi	r30, 0x40	; 64
 70a:	be 07       	cpc	r27, r30
 70c:	60 f3       	brcs	.-40     	; 0x6e6 <__mulsf3+0x16a>
 70e:	6b 8f       	std	Y+27, r22	; 0x1b
 710:	7c 8f       	std	Y+28, r23	; 0x1c
 712:	6f e7       	ldi	r22, 0x7F	; 127
 714:	e6 2e       	mov	r14, r22
 716:	f1 2c       	mov	r15, r1
 718:	01 2d       	mov	r16, r1
 71a:	11 2d       	mov	r17, r1
 71c:	e8 22       	and	r14, r24
 71e:	f9 22       	and	r15, r25
 720:	0a 23       	and	r16, r26
 722:	1b 23       	and	r17, r27
 724:	60 e4       	ldi	r22, 0x40	; 64
 726:	e6 16       	cp	r14, r22
 728:	f1 04       	cpc	r15, r1
 72a:	01 05       	cpc	r16, r1
 72c:	11 05       	cpc	r17, r1
 72e:	61 f4       	brne	.+24     	; 0x748 <__mulsf3+0x1cc>
 730:	87 fd       	sbrc	r24, 7
 732:	0a c0       	rjmp	.+20     	; 0x748 <__mulsf3+0x1cc>
 734:	21 15       	cp	r18, r1
 736:	31 05       	cpc	r19, r1
 738:	41 05       	cpc	r20, r1
 73a:	51 05       	cpc	r21, r1
 73c:	29 f0       	breq	.+10     	; 0x748 <__mulsf3+0x1cc>
 73e:	80 5c       	subi	r24, 0xC0	; 192
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	af 4f       	sbci	r26, 0xFF	; 255
 744:	bf 4f       	sbci	r27, 0xFF	; 255
 746:	80 78       	andi	r24, 0x80	; 128
 748:	8d 8f       	std	Y+29, r24	; 0x1d
 74a:	9e 8f       	std	Y+30, r25	; 0x1e
 74c:	af 8f       	std	Y+31, r26	; 0x1f
 74e:	b8 a3       	std	Y+32, r27	; 0x20
 750:	83 e0       	ldi	r24, 0x03	; 3
 752:	89 8f       	std	Y+25, r24	; 0x19
 754:	ce 01       	movw	r24, r28
 756:	49 96       	adiw	r24, 0x19	; 25
 758:	02 c0       	rjmp	.+4      	; 0x75e <__mulsf3+0x1e2>
 75a:	84 e5       	ldi	r24, 0x54	; 84
 75c:	91 e0       	ldi	r25, 0x01	; 1
 75e:	20 d1       	rcall	.+576    	; 0x9a0 <__pack_f>
 760:	a0 96       	adiw	r28, 0x20	; 32
 762:	e2 e1       	ldi	r30, 0x12	; 18
 764:	83 c2       	rjmp	.+1286   	; 0xc6c <__epilogue_restores__>

00000766 <__fixsfsi>:
 766:	ac e0       	ldi	r26, 0x0C	; 12
 768:	b0 e0       	ldi	r27, 0x00	; 0
 76a:	e8 eb       	ldi	r30, 0xB8	; 184
 76c:	f3 e0       	ldi	r31, 0x03	; 3
 76e:	72 c2       	rjmp	.+1252   	; 0xc54 <__prologue_saves__+0x20>
 770:	69 83       	std	Y+1, r22	; 0x01
 772:	7a 83       	std	Y+2, r23	; 0x02
 774:	8b 83       	std	Y+3, r24	; 0x03
 776:	9c 83       	std	Y+4, r25	; 0x04
 778:	ce 01       	movw	r24, r28
 77a:	01 96       	adiw	r24, 0x01	; 1
 77c:	be 01       	movw	r22, r28
 77e:	6b 5f       	subi	r22, 0xFB	; 251
 780:	7f 4f       	sbci	r23, 0xFF	; 255
 782:	db d1       	rcall	.+950    	; 0xb3a <__unpack_f>
 784:	8d 81       	ldd	r24, Y+5	; 0x05
 786:	82 30       	cpi	r24, 0x02	; 2
 788:	81 f1       	breq	.+96     	; 0x7ea <__fixsfsi+0x84>
 78a:	82 30       	cpi	r24, 0x02	; 2
 78c:	70 f1       	brcs	.+92     	; 0x7ea <__fixsfsi+0x84>
 78e:	84 30       	cpi	r24, 0x04	; 4
 790:	21 f4       	brne	.+8      	; 0x79a <__fixsfsi+0x34>
 792:	8e 81       	ldd	r24, Y+6	; 0x06
 794:	88 23       	and	r24, r24
 796:	69 f1       	breq	.+90     	; 0x7f2 <__fixsfsi+0x8c>
 798:	0a c0       	rjmp	.+20     	; 0x7ae <__fixsfsi+0x48>
 79a:	2f 81       	ldd	r18, Y+7	; 0x07
 79c:	38 85       	ldd	r19, Y+8	; 0x08
 79e:	37 fd       	sbrc	r19, 7
 7a0:	24 c0       	rjmp	.+72     	; 0x7ea <__fixsfsi+0x84>
 7a2:	6e 81       	ldd	r22, Y+6	; 0x06
 7a4:	2f 31       	cpi	r18, 0x1F	; 31
 7a6:	31 05       	cpc	r19, r1
 7a8:	3c f0       	brlt	.+14     	; 0x7b8 <__fixsfsi+0x52>
 7aa:	66 23       	and	r22, r22
 7ac:	11 f1       	breq	.+68     	; 0x7f2 <__fixsfsi+0x8c>
 7ae:	20 e0       	ldi	r18, 0x00	; 0
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	40 e0       	ldi	r20, 0x00	; 0
 7b4:	50 e8       	ldi	r21, 0x80	; 128
 7b6:	21 c0       	rjmp	.+66     	; 0x7fa <__fixsfsi+0x94>
 7b8:	8e e1       	ldi	r24, 0x1E	; 30
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	82 1b       	sub	r24, r18
 7be:	93 0b       	sbc	r25, r19
 7c0:	29 85       	ldd	r18, Y+9	; 0x09
 7c2:	3a 85       	ldd	r19, Y+10	; 0x0a
 7c4:	4b 85       	ldd	r20, Y+11	; 0x0b
 7c6:	5c 85       	ldd	r21, Y+12	; 0x0c
 7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <__fixsfsi+0x6c>
 7ca:	56 95       	lsr	r21
 7cc:	47 95       	ror	r20
 7ce:	37 95       	ror	r19
 7d0:	27 95       	ror	r18
 7d2:	8a 95       	dec	r24
 7d4:	d2 f7       	brpl	.-12     	; 0x7ca <__fixsfsi+0x64>
 7d6:	66 23       	and	r22, r22
 7d8:	81 f0       	breq	.+32     	; 0x7fa <__fixsfsi+0x94>
 7da:	50 95       	com	r21
 7dc:	40 95       	com	r20
 7de:	30 95       	com	r19
 7e0:	21 95       	neg	r18
 7e2:	3f 4f       	sbci	r19, 0xFF	; 255
 7e4:	4f 4f       	sbci	r20, 0xFF	; 255
 7e6:	5f 4f       	sbci	r21, 0xFF	; 255
 7e8:	08 c0       	rjmp	.+16     	; 0x7fa <__fixsfsi+0x94>
 7ea:	20 e0       	ldi	r18, 0x00	; 0
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	a9 01       	movw	r20, r18
 7f0:	04 c0       	rjmp	.+8      	; 0x7fa <__fixsfsi+0x94>
 7f2:	2f ef       	ldi	r18, 0xFF	; 255
 7f4:	3f ef       	ldi	r19, 0xFF	; 255
 7f6:	4f ef       	ldi	r20, 0xFF	; 255
 7f8:	5f e7       	ldi	r21, 0x7F	; 127
 7fa:	b9 01       	movw	r22, r18
 7fc:	ca 01       	movw	r24, r20
 7fe:	2c 96       	adiw	r28, 0x0c	; 12
 800:	e2 e0       	ldi	r30, 0x02	; 2
 802:	44 c2       	rjmp	.+1160   	; 0xc8c <__epilogue_restores__+0x20>

00000804 <__floatunsisf>:
 804:	a8 e0       	ldi	r26, 0x08	; 8
 806:	b0 e0       	ldi	r27, 0x00	; 0
 808:	e7 e0       	ldi	r30, 0x07	; 7
 80a:	f4 e0       	ldi	r31, 0x04	; 4
 80c:	1d c2       	rjmp	.+1082   	; 0xc48 <__prologue_saves__+0x14>
 80e:	7b 01       	movw	r14, r22
 810:	8c 01       	movw	r16, r24
 812:	1a 82       	std	Y+2, r1	; 0x02
 814:	61 15       	cp	r22, r1
 816:	71 05       	cpc	r23, r1
 818:	81 05       	cpc	r24, r1
 81a:	91 05       	cpc	r25, r1
 81c:	19 f4       	brne	.+6      	; 0x824 <__floatunsisf+0x20>
 81e:	82 e0       	ldi	r24, 0x02	; 2
 820:	89 83       	std	Y+1, r24	; 0x01
 822:	5e c0       	rjmp	.+188    	; 0x8e0 <__floatunsisf+0xdc>
 824:	83 e0       	ldi	r24, 0x03	; 3
 826:	89 83       	std	Y+1, r24	; 0x01
 828:	8e e1       	ldi	r24, 0x1E	; 30
 82a:	c8 2e       	mov	r12, r24
 82c:	d1 2c       	mov	r13, r1
 82e:	dc 82       	std	Y+4, r13	; 0x04
 830:	cb 82       	std	Y+3, r12	; 0x03
 832:	ed 82       	std	Y+5, r14	; 0x05
 834:	fe 82       	std	Y+6, r15	; 0x06
 836:	0f 83       	std	Y+7, r16	; 0x07
 838:	18 87       	std	Y+8, r17	; 0x08
 83a:	c8 01       	movw	r24, r16
 83c:	b7 01       	movw	r22, r14
 83e:	56 d0       	rcall	.+172    	; 0x8ec <__clzsi2>
 840:	fc 01       	movw	r30, r24
 842:	31 97       	sbiw	r30, 0x01	; 1
 844:	f7 ff       	sbrs	r31, 7
 846:	3a c0       	rjmp	.+116    	; 0x8bc <__floatunsisf+0xb8>
 848:	aa 27       	eor	r26, r26
 84a:	bb 27       	eor	r27, r27
 84c:	ae 1b       	sub	r26, r30
 84e:	bf 0b       	sbc	r27, r31
 850:	21 e0       	ldi	r18, 0x01	; 1
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	40 e0       	ldi	r20, 0x00	; 0
 856:	50 e0       	ldi	r21, 0x00	; 0
 858:	0a 2e       	mov	r0, r26
 85a:	04 c0       	rjmp	.+8      	; 0x864 <__floatunsisf+0x60>
 85c:	22 0f       	add	r18, r18
 85e:	33 1f       	adc	r19, r19
 860:	44 1f       	adc	r20, r20
 862:	55 1f       	adc	r21, r21
 864:	0a 94       	dec	r0
 866:	d2 f7       	brpl	.-12     	; 0x85c <__floatunsisf+0x58>
 868:	21 50       	subi	r18, 0x01	; 1
 86a:	30 40       	sbci	r19, 0x00	; 0
 86c:	40 40       	sbci	r20, 0x00	; 0
 86e:	50 40       	sbci	r21, 0x00	; 0
 870:	2e 21       	and	r18, r14
 872:	3f 21       	and	r19, r15
 874:	40 23       	and	r20, r16
 876:	51 23       	and	r21, r17
 878:	61 e0       	ldi	r22, 0x01	; 1
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	21 15       	cp	r18, r1
 882:	31 05       	cpc	r19, r1
 884:	41 05       	cpc	r20, r1
 886:	51 05       	cpc	r21, r1
 888:	19 f4       	brne	.+6      	; 0x890 <__floatunsisf+0x8c>
 88a:	60 e0       	ldi	r22, 0x00	; 0
 88c:	70 e0       	ldi	r23, 0x00	; 0
 88e:	cb 01       	movw	r24, r22
 890:	04 c0       	rjmp	.+8      	; 0x89a <__floatunsisf+0x96>
 892:	16 95       	lsr	r17
 894:	07 95       	ror	r16
 896:	f7 94       	ror	r15
 898:	e7 94       	ror	r14
 89a:	aa 95       	dec	r26
 89c:	d2 f7       	brpl	.-12     	; 0x892 <__floatunsisf+0x8e>
 89e:	e6 2a       	or	r14, r22
 8a0:	f7 2a       	or	r15, r23
 8a2:	08 2b       	or	r16, r24
 8a4:	19 2b       	or	r17, r25
 8a6:	ed 82       	std	Y+5, r14	; 0x05
 8a8:	fe 82       	std	Y+6, r15	; 0x06
 8aa:	0f 83       	std	Y+7, r16	; 0x07
 8ac:	18 87       	std	Y+8, r17	; 0x08
 8ae:	8e e1       	ldi	r24, 0x1E	; 30
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	8e 1b       	sub	r24, r30
 8b4:	9f 0b       	sbc	r25, r31
 8b6:	9c 83       	std	Y+4, r25	; 0x04
 8b8:	8b 83       	std	Y+3, r24	; 0x03
 8ba:	12 c0       	rjmp	.+36     	; 0x8e0 <__floatunsisf+0xdc>
 8bc:	30 97       	sbiw	r30, 0x00	; 0
 8be:	81 f0       	breq	.+32     	; 0x8e0 <__floatunsisf+0xdc>
 8c0:	0e 2e       	mov	r0, r30
 8c2:	04 c0       	rjmp	.+8      	; 0x8cc <__floatunsisf+0xc8>
 8c4:	ee 0c       	add	r14, r14
 8c6:	ff 1c       	adc	r15, r15
 8c8:	00 1f       	adc	r16, r16
 8ca:	11 1f       	adc	r17, r17
 8cc:	0a 94       	dec	r0
 8ce:	d2 f7       	brpl	.-12     	; 0x8c4 <__floatunsisf+0xc0>
 8d0:	ed 82       	std	Y+5, r14	; 0x05
 8d2:	fe 82       	std	Y+6, r15	; 0x06
 8d4:	0f 83       	std	Y+7, r16	; 0x07
 8d6:	18 87       	std	Y+8, r17	; 0x08
 8d8:	ce 1a       	sub	r12, r30
 8da:	df 0a       	sbc	r13, r31
 8dc:	dc 82       	std	Y+4, r13	; 0x04
 8de:	cb 82       	std	Y+3, r12	; 0x03
 8e0:	ce 01       	movw	r24, r28
 8e2:	01 96       	adiw	r24, 0x01	; 1
 8e4:	5d d0       	rcall	.+186    	; 0x9a0 <__pack_f>
 8e6:	28 96       	adiw	r28, 0x08	; 8
 8e8:	e8 e0       	ldi	r30, 0x08	; 8
 8ea:	ca c1       	rjmp	.+916    	; 0xc80 <__epilogue_restores__+0x14>

000008ec <__clzsi2>:
 8ec:	af 92       	push	r10
 8ee:	bf 92       	push	r11
 8f0:	cf 92       	push	r12
 8f2:	df 92       	push	r13
 8f4:	ef 92       	push	r14
 8f6:	ff 92       	push	r15
 8f8:	0f 93       	push	r16
 8fa:	1f 93       	push	r17
 8fc:	7b 01       	movw	r14, r22
 8fe:	8c 01       	movw	r16, r24
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	e8 16       	cp	r14, r24
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	f8 06       	cpc	r15, r24
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	08 07       	cpc	r16, r24
 90c:	80 e0       	ldi	r24, 0x00	; 0
 90e:	18 07       	cpc	r17, r24
 910:	58 f4       	brcc	.+22     	; 0x928 <__clzsi2+0x3c>
 912:	ef ef       	ldi	r30, 0xFF	; 255
 914:	ee 16       	cp	r14, r30
 916:	f1 04       	cpc	r15, r1
 918:	01 05       	cpc	r16, r1
 91a:	11 05       	cpc	r17, r1
 91c:	09 f0       	breq	.+2      	; 0x920 <__clzsi2+0x34>
 91e:	90 f4       	brcc	.+36     	; 0x944 <__clzsi2+0x58>
 920:	80 e0       	ldi	r24, 0x00	; 0
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	dc 01       	movw	r26, r24
 926:	17 c0       	rjmp	.+46     	; 0x956 <__clzsi2+0x6a>
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	ef 16       	cp	r14, r31
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	ff 06       	cpc	r15, r31
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	0f 07       	cpc	r16, r31
 934:	f1 e0       	ldi	r31, 0x01	; 1
 936:	1f 07       	cpc	r17, r31
 938:	50 f4       	brcc	.+20     	; 0x94e <__clzsi2+0x62>
 93a:	80 e1       	ldi	r24, 0x10	; 16
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	a0 e0       	ldi	r26, 0x00	; 0
 940:	b0 e0       	ldi	r27, 0x00	; 0
 942:	09 c0       	rjmp	.+18     	; 0x956 <__clzsi2+0x6a>
 944:	88 e0       	ldi	r24, 0x08	; 8
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	a0 e0       	ldi	r26, 0x00	; 0
 94a:	b0 e0       	ldi	r27, 0x00	; 0
 94c:	04 c0       	rjmp	.+8      	; 0x956 <__clzsi2+0x6a>
 94e:	88 e1       	ldi	r24, 0x18	; 24
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	a0 e0       	ldi	r26, 0x00	; 0
 954:	b0 e0       	ldi	r27, 0x00	; 0
 956:	20 e2       	ldi	r18, 0x20	; 32
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	40 e0       	ldi	r20, 0x00	; 0
 95c:	50 e0       	ldi	r21, 0x00	; 0
 95e:	28 1b       	sub	r18, r24
 960:	39 0b       	sbc	r19, r25
 962:	4a 0b       	sbc	r20, r26
 964:	5b 0b       	sbc	r21, r27
 966:	57 01       	movw	r10, r14
 968:	68 01       	movw	r12, r16
 96a:	04 c0       	rjmp	.+8      	; 0x974 <__clzsi2+0x88>
 96c:	d6 94       	lsr	r13
 96e:	c7 94       	ror	r12
 970:	b7 94       	ror	r11
 972:	a7 94       	ror	r10
 974:	8a 95       	dec	r24
 976:	d2 f7       	brpl	.-12     	; 0x96c <__clzsi2+0x80>
 978:	d6 01       	movw	r26, r12
 97a:	c5 01       	movw	r24, r10
 97c:	84 5a       	subi	r24, 0xA4	; 164
 97e:	9e 4f       	sbci	r25, 0xFE	; 254
 980:	fc 01       	movw	r30, r24
 982:	80 81       	ld	r24, Z
 984:	28 1b       	sub	r18, r24
 986:	31 09       	sbc	r19, r1
 988:	41 09       	sbc	r20, r1
 98a:	51 09       	sbc	r21, r1
 98c:	c9 01       	movw	r24, r18
 98e:	1f 91       	pop	r17
 990:	0f 91       	pop	r16
 992:	ff 90       	pop	r15
 994:	ef 90       	pop	r14
 996:	df 90       	pop	r13
 998:	cf 90       	pop	r12
 99a:	bf 90       	pop	r11
 99c:	af 90       	pop	r10
 99e:	08 95       	ret

000009a0 <__pack_f>:
 9a0:	ef 92       	push	r14
 9a2:	ff 92       	push	r15
 9a4:	0f 93       	push	r16
 9a6:	1f 93       	push	r17
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
 9ac:	fc 01       	movw	r30, r24
 9ae:	24 81       	ldd	r18, Z+4	; 0x04
 9b0:	35 81       	ldd	r19, Z+5	; 0x05
 9b2:	46 81       	ldd	r20, Z+6	; 0x06
 9b4:	57 81       	ldd	r21, Z+7	; 0x07
 9b6:	61 81       	ldd	r22, Z+1	; 0x01
 9b8:	80 81       	ld	r24, Z
 9ba:	82 30       	cpi	r24, 0x02	; 2
 9bc:	20 f4       	brcc	.+8      	; 0x9c6 <__pack_f+0x26>
 9be:	40 61       	ori	r20, 0x10	; 16
 9c0:	ef ef       	ldi	r30, 0xFF	; 255
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	a3 c0       	rjmp	.+326    	; 0xb0c <__pack_f+0x16c>
 9c6:	84 30       	cpi	r24, 0x04	; 4
 9c8:	09 f4       	brne	.+2      	; 0x9cc <__pack_f+0x2c>
 9ca:	9b c0       	rjmp	.+310    	; 0xb02 <__pack_f+0x162>
 9cc:	82 30       	cpi	r24, 0x02	; 2
 9ce:	09 f4       	brne	.+2      	; 0x9d2 <__pack_f+0x32>
 9d0:	92 c0       	rjmp	.+292    	; 0xaf6 <__pack_f+0x156>
 9d2:	21 15       	cp	r18, r1
 9d4:	31 05       	cpc	r19, r1
 9d6:	41 05       	cpc	r20, r1
 9d8:	51 05       	cpc	r21, r1
 9da:	09 f4       	brne	.+2      	; 0x9de <__pack_f+0x3e>
 9dc:	8f c0       	rjmp	.+286    	; 0xafc <__pack_f+0x15c>
 9de:	02 80       	ldd	r0, Z+2	; 0x02
 9e0:	f3 81       	ldd	r31, Z+3	; 0x03
 9e2:	e0 2d       	mov	r30, r0
 9e4:	8f ef       	ldi	r24, 0xFF	; 255
 9e6:	e2 38       	cpi	r30, 0x82	; 130
 9e8:	f8 07       	cpc	r31, r24
 9ea:	0c f0       	brlt	.+2      	; 0x9ee <__pack_f+0x4e>
 9ec:	5a c0       	rjmp	.+180    	; 0xaa2 <__pack_f+0x102>
 9ee:	c2 e8       	ldi	r28, 0x82	; 130
 9f0:	df ef       	ldi	r29, 0xFF	; 255
 9f2:	ce 1b       	sub	r28, r30
 9f4:	df 0b       	sbc	r29, r31
 9f6:	ca 31       	cpi	r28, 0x1A	; 26
 9f8:	d1 05       	cpc	r29, r1
 9fa:	6c f5       	brge	.+90     	; 0xa56 <__pack_f+0xb6>
 9fc:	79 01       	movw	r14, r18
 9fe:	8a 01       	movw	r16, r20
 a00:	0c 2e       	mov	r0, r28
 a02:	04 c0       	rjmp	.+8      	; 0xa0c <__pack_f+0x6c>
 a04:	16 95       	lsr	r17
 a06:	07 95       	ror	r16
 a08:	f7 94       	ror	r15
 a0a:	e7 94       	ror	r14
 a0c:	0a 94       	dec	r0
 a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__pack_f+0x64>
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	a0 e0       	ldi	r26, 0x00	; 0
 a16:	b0 e0       	ldi	r27, 0x00	; 0
 a18:	0c 2e       	mov	r0, r28
 a1a:	04 c0       	rjmp	.+8      	; 0xa24 <__pack_f+0x84>
 a1c:	88 0f       	add	r24, r24
 a1e:	99 1f       	adc	r25, r25
 a20:	aa 1f       	adc	r26, r26
 a22:	bb 1f       	adc	r27, r27
 a24:	0a 94       	dec	r0
 a26:	d2 f7       	brpl	.-12     	; 0xa1c <__pack_f+0x7c>
 a28:	01 97       	sbiw	r24, 0x01	; 1
 a2a:	a1 09       	sbc	r26, r1
 a2c:	b1 09       	sbc	r27, r1
 a2e:	82 23       	and	r24, r18
 a30:	93 23       	and	r25, r19
 a32:	a4 23       	and	r26, r20
 a34:	b5 23       	and	r27, r21
 a36:	21 e0       	ldi	r18, 0x01	; 1
 a38:	30 e0       	ldi	r19, 0x00	; 0
 a3a:	40 e0       	ldi	r20, 0x00	; 0
 a3c:	50 e0       	ldi	r21, 0x00	; 0
 a3e:	00 97       	sbiw	r24, 0x00	; 0
 a40:	a1 05       	cpc	r26, r1
 a42:	b1 05       	cpc	r27, r1
 a44:	19 f4       	brne	.+6      	; 0xa4c <__pack_f+0xac>
 a46:	20 e0       	ldi	r18, 0x00	; 0
 a48:	30 e0       	ldi	r19, 0x00	; 0
 a4a:	a9 01       	movw	r20, r18
 a4c:	2e 29       	or	r18, r14
 a4e:	3f 29       	or	r19, r15
 a50:	40 2b       	or	r20, r16
 a52:	51 2b       	or	r21, r17
 a54:	03 c0       	rjmp	.+6      	; 0xa5c <__pack_f+0xbc>
 a56:	20 e0       	ldi	r18, 0x00	; 0
 a58:	30 e0       	ldi	r19, 0x00	; 0
 a5a:	a9 01       	movw	r20, r18
 a5c:	da 01       	movw	r26, r20
 a5e:	c9 01       	movw	r24, r18
 a60:	8f 77       	andi	r24, 0x7F	; 127
 a62:	90 70       	andi	r25, 0x00	; 0
 a64:	a0 70       	andi	r26, 0x00	; 0
 a66:	b0 70       	andi	r27, 0x00	; 0
 a68:	80 34       	cpi	r24, 0x40	; 64
 a6a:	91 05       	cpc	r25, r1
 a6c:	a1 05       	cpc	r26, r1
 a6e:	b1 05       	cpc	r27, r1
 a70:	39 f4       	brne	.+14     	; 0xa80 <__pack_f+0xe0>
 a72:	27 ff       	sbrs	r18, 7
 a74:	09 c0       	rjmp	.+18     	; 0xa88 <__pack_f+0xe8>
 a76:	20 5c       	subi	r18, 0xC0	; 192
 a78:	3f 4f       	sbci	r19, 0xFF	; 255
 a7a:	4f 4f       	sbci	r20, 0xFF	; 255
 a7c:	5f 4f       	sbci	r21, 0xFF	; 255
 a7e:	04 c0       	rjmp	.+8      	; 0xa88 <__pack_f+0xe8>
 a80:	21 5c       	subi	r18, 0xC1	; 193
 a82:	3f 4f       	sbci	r19, 0xFF	; 255
 a84:	4f 4f       	sbci	r20, 0xFF	; 255
 a86:	5f 4f       	sbci	r21, 0xFF	; 255
 a88:	e1 e0       	ldi	r30, 0x01	; 1
 a8a:	f0 e0       	ldi	r31, 0x00	; 0
 a8c:	20 30       	cpi	r18, 0x00	; 0
 a8e:	80 e0       	ldi	r24, 0x00	; 0
 a90:	38 07       	cpc	r19, r24
 a92:	80 e0       	ldi	r24, 0x00	; 0
 a94:	48 07       	cpc	r20, r24
 a96:	80 e4       	ldi	r24, 0x40	; 64
 a98:	58 07       	cpc	r21, r24
 a9a:	28 f5       	brcc	.+74     	; 0xae6 <__pack_f+0x146>
 a9c:	e0 e0       	ldi	r30, 0x00	; 0
 a9e:	f0 e0       	ldi	r31, 0x00	; 0
 aa0:	22 c0       	rjmp	.+68     	; 0xae6 <__pack_f+0x146>
 aa2:	e0 38       	cpi	r30, 0x80	; 128
 aa4:	f1 05       	cpc	r31, r1
 aa6:	6c f5       	brge	.+90     	; 0xb02 <__pack_f+0x162>
 aa8:	e1 58       	subi	r30, 0x81	; 129
 aaa:	ff 4f       	sbci	r31, 0xFF	; 255
 aac:	da 01       	movw	r26, r20
 aae:	c9 01       	movw	r24, r18
 ab0:	8f 77       	andi	r24, 0x7F	; 127
 ab2:	90 70       	andi	r25, 0x00	; 0
 ab4:	a0 70       	andi	r26, 0x00	; 0
 ab6:	b0 70       	andi	r27, 0x00	; 0
 ab8:	80 34       	cpi	r24, 0x40	; 64
 aba:	91 05       	cpc	r25, r1
 abc:	a1 05       	cpc	r26, r1
 abe:	b1 05       	cpc	r27, r1
 ac0:	39 f4       	brne	.+14     	; 0xad0 <__pack_f+0x130>
 ac2:	27 ff       	sbrs	r18, 7
 ac4:	09 c0       	rjmp	.+18     	; 0xad8 <__pack_f+0x138>
 ac6:	20 5c       	subi	r18, 0xC0	; 192
 ac8:	3f 4f       	sbci	r19, 0xFF	; 255
 aca:	4f 4f       	sbci	r20, 0xFF	; 255
 acc:	5f 4f       	sbci	r21, 0xFF	; 255
 ace:	04 c0       	rjmp	.+8      	; 0xad8 <__pack_f+0x138>
 ad0:	21 5c       	subi	r18, 0xC1	; 193
 ad2:	3f 4f       	sbci	r19, 0xFF	; 255
 ad4:	4f 4f       	sbci	r20, 0xFF	; 255
 ad6:	5f 4f       	sbci	r21, 0xFF	; 255
 ad8:	57 ff       	sbrs	r21, 7
 ada:	05 c0       	rjmp	.+10     	; 0xae6 <__pack_f+0x146>
 adc:	56 95       	lsr	r21
 ade:	47 95       	ror	r20
 ae0:	37 95       	ror	r19
 ae2:	27 95       	ror	r18
 ae4:	31 96       	adiw	r30, 0x01	; 1
 ae6:	87 e0       	ldi	r24, 0x07	; 7
 ae8:	56 95       	lsr	r21
 aea:	47 95       	ror	r20
 aec:	37 95       	ror	r19
 aee:	27 95       	ror	r18
 af0:	8a 95       	dec	r24
 af2:	d1 f7       	brne	.-12     	; 0xae8 <__pack_f+0x148>
 af4:	0b c0       	rjmp	.+22     	; 0xb0c <__pack_f+0x16c>
 af6:	e0 e0       	ldi	r30, 0x00	; 0
 af8:	f0 e0       	ldi	r31, 0x00	; 0
 afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x166>
 afc:	e0 e0       	ldi	r30, 0x00	; 0
 afe:	f0 e0       	ldi	r31, 0x00	; 0
 b00:	05 c0       	rjmp	.+10     	; 0xb0c <__pack_f+0x16c>
 b02:	ef ef       	ldi	r30, 0xFF	; 255
 b04:	f0 e0       	ldi	r31, 0x00	; 0
 b06:	20 e0       	ldi	r18, 0x00	; 0
 b08:	30 e0       	ldi	r19, 0x00	; 0
 b0a:	a9 01       	movw	r20, r18
 b0c:	8e 2f       	mov	r24, r30
 b0e:	87 95       	ror	r24
 b10:	88 27       	eor	r24, r24
 b12:	87 95       	ror	r24
 b14:	94 2f       	mov	r25, r20
 b16:	9f 77       	andi	r25, 0x7F	; 127
 b18:	67 95       	ror	r22
 b1a:	66 27       	eor	r22, r22
 b1c:	67 95       	ror	r22
 b1e:	e6 95       	lsr	r30
 b20:	e2 2e       	mov	r14, r18
 b22:	a9 2f       	mov	r26, r25
 b24:	a8 2b       	or	r26, r24
 b26:	fe 2f       	mov	r31, r30
 b28:	f6 2b       	or	r31, r22
 b2a:	62 2f       	mov	r22, r18
 b2c:	73 2f       	mov	r23, r19
 b2e:	8a 2f       	mov	r24, r26
 b30:	9f 2f       	mov	r25, r31
 b32:	cd b7       	in	r28, 0x3d	; 61
 b34:	de b7       	in	r29, 0x3e	; 62
 b36:	e6 e0       	ldi	r30, 0x06	; 6
 b38:	a5 c0       	rjmp	.+330    	; 0xc84 <__epilogue_restores__+0x18>

00000b3a <__unpack_f>:
 b3a:	dc 01       	movw	r26, r24
 b3c:	fb 01       	movw	r30, r22
 b3e:	2c 91       	ld	r18, X
 b40:	11 96       	adiw	r26, 0x01	; 1
 b42:	3c 91       	ld	r19, X
 b44:	11 97       	sbiw	r26, 0x01	; 1
 b46:	12 96       	adiw	r26, 0x02	; 2
 b48:	8c 91       	ld	r24, X
 b4a:	12 97       	sbiw	r26, 0x02	; 2
 b4c:	48 2f       	mov	r20, r24
 b4e:	4f 77       	andi	r20, 0x7F	; 127
 b50:	50 e0       	ldi	r21, 0x00	; 0
 b52:	98 2f       	mov	r25, r24
 b54:	99 1f       	adc	r25, r25
 b56:	99 27       	eor	r25, r25
 b58:	99 1f       	adc	r25, r25
 b5a:	13 96       	adiw	r26, 0x03	; 3
 b5c:	6c 91       	ld	r22, X
 b5e:	13 97       	sbiw	r26, 0x03	; 3
 b60:	86 2f       	mov	r24, r22
 b62:	88 0f       	add	r24, r24
 b64:	89 2b       	or	r24, r25
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	66 1f       	adc	r22, r22
 b6a:	66 27       	eor	r22, r22
 b6c:	66 1f       	adc	r22, r22
 b6e:	61 83       	std	Z+1, r22	; 0x01
 b70:	00 97       	sbiw	r24, 0x00	; 0
 b72:	39 f5       	brne	.+78     	; 0xbc2 <__unpack_f+0x88>
 b74:	21 15       	cp	r18, r1
 b76:	31 05       	cpc	r19, r1
 b78:	41 05       	cpc	r20, r1
 b7a:	51 05       	cpc	r21, r1
 b7c:	11 f4       	brne	.+4      	; 0xb82 <__unpack_f+0x48>
 b7e:	82 e0       	ldi	r24, 0x02	; 2
 b80:	29 c0       	rjmp	.+82     	; 0xbd4 <__unpack_f+0x9a>
 b82:	82 e8       	ldi	r24, 0x82	; 130
 b84:	9f ef       	ldi	r25, 0xFF	; 255
 b86:	93 83       	std	Z+3, r25	; 0x03
 b88:	82 83       	std	Z+2, r24	; 0x02
 b8a:	67 e0       	ldi	r22, 0x07	; 7
 b8c:	22 0f       	add	r18, r18
 b8e:	33 1f       	adc	r19, r19
 b90:	44 1f       	adc	r20, r20
 b92:	55 1f       	adc	r21, r21
 b94:	6a 95       	dec	r22
 b96:	d1 f7       	brne	.-12     	; 0xb8c <__unpack_f+0x52>
 b98:	83 e0       	ldi	r24, 0x03	; 3
 b9a:	80 83       	st	Z, r24
 b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <__unpack_f+0x76>
 b9e:	22 0f       	add	r18, r18
 ba0:	33 1f       	adc	r19, r19
 ba2:	44 1f       	adc	r20, r20
 ba4:	55 1f       	adc	r21, r21
 ba6:	82 81       	ldd	r24, Z+2	; 0x02
 ba8:	93 81       	ldd	r25, Z+3	; 0x03
 baa:	01 97       	sbiw	r24, 0x01	; 1
 bac:	93 83       	std	Z+3, r25	; 0x03
 bae:	82 83       	std	Z+2, r24	; 0x02
 bb0:	20 30       	cpi	r18, 0x00	; 0
 bb2:	80 e0       	ldi	r24, 0x00	; 0
 bb4:	38 07       	cpc	r19, r24
 bb6:	80 e0       	ldi	r24, 0x00	; 0
 bb8:	48 07       	cpc	r20, r24
 bba:	80 e4       	ldi	r24, 0x40	; 64
 bbc:	58 07       	cpc	r21, r24
 bbe:	78 f3       	brcs	.-34     	; 0xb9e <__unpack_f+0x64>
 bc0:	20 c0       	rjmp	.+64     	; 0xc02 <__unpack_f+0xc8>
 bc2:	8f 3f       	cpi	r24, 0xFF	; 255
 bc4:	91 05       	cpc	r25, r1
 bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xac>
 bc8:	21 15       	cp	r18, r1
 bca:	31 05       	cpc	r19, r1
 bcc:	41 05       	cpc	r20, r1
 bce:	51 05       	cpc	r21, r1
 bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0x9e>
 bd2:	84 e0       	ldi	r24, 0x04	; 4
 bd4:	80 83       	st	Z, r24
 bd6:	08 95       	ret
 bd8:	44 ff       	sbrs	r20, 4
 bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xa8>
 bdc:	81 e0       	ldi	r24, 0x01	; 1
 bde:	80 83       	st	Z, r24
 be0:	10 c0       	rjmp	.+32     	; 0xc02 <__unpack_f+0xc8>
 be2:	10 82       	st	Z, r1
 be4:	0e c0       	rjmp	.+28     	; 0xc02 <__unpack_f+0xc8>
 be6:	8f 57       	subi	r24, 0x7F	; 127
 be8:	90 40       	sbci	r25, 0x00	; 0
 bea:	93 83       	std	Z+3, r25	; 0x03
 bec:	82 83       	std	Z+2, r24	; 0x02
 bee:	83 e0       	ldi	r24, 0x03	; 3
 bf0:	80 83       	st	Z, r24
 bf2:	87 e0       	ldi	r24, 0x07	; 7
 bf4:	22 0f       	add	r18, r18
 bf6:	33 1f       	adc	r19, r19
 bf8:	44 1f       	adc	r20, r20
 bfa:	55 1f       	adc	r21, r21
 bfc:	8a 95       	dec	r24
 bfe:	d1 f7       	brne	.-12     	; 0xbf4 <__unpack_f+0xba>
 c00:	50 64       	ori	r21, 0x40	; 64
 c02:	24 83       	std	Z+4, r18	; 0x04
 c04:	35 83       	std	Z+5, r19	; 0x05
 c06:	46 83       	std	Z+6, r20	; 0x06
 c08:	57 83       	std	Z+7, r21	; 0x07
 c0a:	08 95       	ret

00000c0c <__udivmodhi4>:
 c0c:	aa 1b       	sub	r26, r26
 c0e:	bb 1b       	sub	r27, r27
 c10:	51 e1       	ldi	r21, 0x11	; 17
 c12:	07 c0       	rjmp	.+14     	; 0xc22 <__udivmodhi4_ep>

00000c14 <__udivmodhi4_loop>:
 c14:	aa 1f       	adc	r26, r26
 c16:	bb 1f       	adc	r27, r27
 c18:	a6 17       	cp	r26, r22
 c1a:	b7 07       	cpc	r27, r23
 c1c:	10 f0       	brcs	.+4      	; 0xc22 <__udivmodhi4_ep>
 c1e:	a6 1b       	sub	r26, r22
 c20:	b7 0b       	sbc	r27, r23

00000c22 <__udivmodhi4_ep>:
 c22:	88 1f       	adc	r24, r24
 c24:	99 1f       	adc	r25, r25
 c26:	5a 95       	dec	r21
 c28:	a9 f7       	brne	.-22     	; 0xc14 <__udivmodhi4_loop>
 c2a:	80 95       	com	r24
 c2c:	90 95       	com	r25
 c2e:	bc 01       	movw	r22, r24
 c30:	cd 01       	movw	r24, r26
 c32:	08 95       	ret

00000c34 <__prologue_saves__>:
 c34:	2f 92       	push	r2
 c36:	3f 92       	push	r3
 c38:	4f 92       	push	r4
 c3a:	5f 92       	push	r5
 c3c:	6f 92       	push	r6
 c3e:	7f 92       	push	r7
 c40:	8f 92       	push	r8
 c42:	9f 92       	push	r9
 c44:	af 92       	push	r10
 c46:	bf 92       	push	r11
 c48:	cf 92       	push	r12
 c4a:	df 92       	push	r13
 c4c:	ef 92       	push	r14
 c4e:	ff 92       	push	r15
 c50:	0f 93       	push	r16
 c52:	1f 93       	push	r17
 c54:	cf 93       	push	r28
 c56:	df 93       	push	r29
 c58:	cd b7       	in	r28, 0x3d	; 61
 c5a:	de b7       	in	r29, 0x3e	; 62
 c5c:	ca 1b       	sub	r28, r26
 c5e:	db 0b       	sbc	r29, r27
 c60:	0f b6       	in	r0, 0x3f	; 63
 c62:	f8 94       	cli
 c64:	de bf       	out	0x3e, r29	; 62
 c66:	0f be       	out	0x3f, r0	; 63
 c68:	cd bf       	out	0x3d, r28	; 61
 c6a:	09 94       	ijmp

00000c6c <__epilogue_restores__>:
 c6c:	2a 88       	ldd	r2, Y+18	; 0x12
 c6e:	39 88       	ldd	r3, Y+17	; 0x11
 c70:	48 88       	ldd	r4, Y+16	; 0x10
 c72:	5f 84       	ldd	r5, Y+15	; 0x0f
 c74:	6e 84       	ldd	r6, Y+14	; 0x0e
 c76:	7d 84       	ldd	r7, Y+13	; 0x0d
 c78:	8c 84       	ldd	r8, Y+12	; 0x0c
 c7a:	9b 84       	ldd	r9, Y+11	; 0x0b
 c7c:	aa 84       	ldd	r10, Y+10	; 0x0a
 c7e:	b9 84       	ldd	r11, Y+9	; 0x09
 c80:	c8 84       	ldd	r12, Y+8	; 0x08
 c82:	df 80       	ldd	r13, Y+7	; 0x07
 c84:	ee 80       	ldd	r14, Y+6	; 0x06
 c86:	fd 80       	ldd	r15, Y+5	; 0x05
 c88:	0c 81       	ldd	r16, Y+4	; 0x04
 c8a:	1b 81       	ldd	r17, Y+3	; 0x03
 c8c:	aa 81       	ldd	r26, Y+2	; 0x02
 c8e:	b9 81       	ldd	r27, Y+1	; 0x01
 c90:	ce 0f       	add	r28, r30
 c92:	d1 1d       	adc	r29, r1
 c94:	0f b6       	in	r0, 0x3f	; 63
 c96:	f8 94       	cli
 c98:	de bf       	out	0x3e, r29	; 62
 c9a:	0f be       	out	0x3f, r0	; 63
 c9c:	cd bf       	out	0x3d, r28	; 61
 c9e:	ed 01       	movw	r28, r26
 ca0:	08 95       	ret

00000ca2 <_exit>:
 ca2:	f8 94       	cli

00000ca4 <__stop_program>:
 ca4:	ff cf       	rjmp	.-2      	; 0xca4 <__stop_program>
